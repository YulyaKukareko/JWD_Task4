Autoboxing and Unboxing
pi = 3.1416
Consider the following code:
Consider the following method:
The program prints the following:
absolute value of -8 = 8
Here is the simplest example of autoboxing:
The Unboxing example shows how this works:
-assigned to a variable of the corresponding wrapper class.
-assigned to a variable of the corresponding primitive type.
The rest of the examples in this section use generics. 
The Java compiler applies autoboxing when a primitive value is:
If the conversion goes the other way, this is called unboxing.
Thus, the compiler converts the previous code to the following at runtime:
The Java compiler applies unboxing when an object of a wrapper class is:
Autoboxing and unboxing lets developers write cleaner code, making it easier to read.
For example, converting an int to an Integer, a double to a Double, and so on. 
If you are not yet familiar with the syntax of generics, see the Generics (Updated) lesson.
-passed as a parameter to a method that expects an object of the corresponding wrapper class;
-passed as a parameter to a method that expects a value of the corresponding primitive type;
Converting an object of a wrapper type (Integer) to its corresponding primitive (int) value is called unboxing. 
Although you add the int values as primitive types, rather than Integer objects, to li, the code compiles. 
Autoboxing is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes. 
Converting a primitive value (an int, for example) into an object of the corresponding wrapper class (Integer) is called autoboxing. 
The compiler does not generate an error because it creates an Integer object from i and adds the object to li. 
The compiler does not generate an error because it invokes the intValue method to convert an Integer to an int at runtime:
Because li is a list of Integer objects, not a list of int values, you may wonder why the Java compiler does not issue a compile-time error. 
Because the remainder (%) and unary plus (+=) operators do not apply to Integer objects, you may wonder why the Java compiler compiles the method without issuing any errors. 
